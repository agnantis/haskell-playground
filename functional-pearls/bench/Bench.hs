import FreeNumber
import Criterion.Main
import Criterion.Main.Options
import Criterion.Types

-- 100 element sorted list: worst case scenarion all numbers exist
succList :: [Int]
succList = [0..1000]

-- 1000 element shuffled list: 382 is missing
largeList :: [Int]
largeList = [ 164, 995, 751, 544, 857, 189, 368, 968, 527, 943, 334, 357, 712, 17, 29, 970, 522, 353, 253, 719, 218, 188
            , 624, 111, 149, 907, 736, 704, 325, 286, 398, 481, 784, 916, 174, 56, 959, 496, 822, 131, 297, 982, 850
            , 695, 534, 564, 79, 475, 261, 18, 955, 920, 906, 638, 166, 801, 400, 171, 96, 331, 468, 508, 273, 361, 453
            , 285, 648, 103, 983, 811, 917, 788, 464, 352, 178, 118, 362, 423, 246, 891, 547, 158, 129, 289, 785, 60, 72
            , 229, 515, 873, 655, 587, 69, 66, 78, 88, 966, 175, 215, 363, 674, 614, 946, 81, 441, 98, 305, 605, 592
            , 269, 720, 886, 619, 939, 344, 116, 967, 8, 504, 537, 987, 756, 27, 401, 529, 306, 888, 492, 509, 251, 642
            , 521, 749, 248, 385, 549, 389, 82, 406, 354, 923, 501, 896, 831, 532, 212, 324, 951, 608, 335, 75, 658, 553
            , 944, 43, 646, 676, 346, 173, 874, 965, 457, 853, 898, 427, 930, 931, 862, 686, 706, 636, 778, 257, 984
            , 828, 753, 945, 639, 782, 47, 562, 563, 859, 743, 466, 298, 233, 876, 533, 894, 282, 887, 975, 591, 430
            , 770, 26, 565, 682, 905, 326, 225, 911, 628, 15, 663, 199, 561, 514, 11, 165, 510, 556, 321, 668, 6, 660
            , 295, 62, 574, 193, 311, 342, 727, 958, 937, 451, 884, 107, 147, 677, 152, 972, 381, 645, 337, 814, 408
            , 650, 882, 761, 235, 23, 5, 763, 856, 735, 183, 42, 402, 185, 584, 725, 841, 439, 237, 445, 941, 595, 933
            , 512, 265, 350, 243, 154, 726, 675, 573, 717, 274, 291, 38, 818, 559, 244, 685, 693, 900, 58, 962, 633, 718
            , 71, 128, 304, 808, 889, 373, 666, 446, 76, 948, 571, 323, 519, 741, 963, 74, 789, 157, 192, 656, 800, 452
            , 296, 210, 14, 153, 730, 205, 734, 924, 336, 776, 391, 942, 409, 971, 901, 156, 267, 477, 526, 418, 278, 84
            , 488, 583, 689, 476, 73, 572, 247, 300, 288, 112, 486, 867, 161, 41, 136, 550, 739, 180, 711, 836, 34, 819
            , 301, 497, 835, 899, 721, 791, 155, 177, 875, 978, 692, 860, 216, 551, 929, 214, 1000, 386, 678, 308, 877
            , 343, 880, 48, 934, 554, 632, 369, 387, 513, 838, 588, 964, 104, 393, 86, 240, 607, 231, 432, 388, 539, 915
            , 345, 913, 317, 570, 20, 443, 91, 528, 425, 223, 498, 417, 40, 407, 997, 226, 37, 125, 895, 93, 462, 65
            , 239, 707, 799, 775, 868, 167, 683, 10, 969, 4, 538, 793, 606, 590, 197, 127, 728, 787, 307, 184, 471, 980
            , 13, 374, 992, 804, 846, 186, 12, 465, 95, 70, 444, 115, 377, 360, 228, 703, 754, 196, 872, 318, 779, 581
            , 52, 952, 812, 329, 479, 806, 151, 19, 433, 207, 312, 575, 910, 469, 755, 413, 490, 380, 351, 31, 985, 671
            , 263, 310, 137, 625, 57, 429, 536, 458, 367, 659, 438, 700, 649, 77, 290, 319, 483, 518, 871, 39, 101, 241
            , 993, 600, 807, 449, 426, 359, 227, 954, 688, 864, 349, 370, 194, 604, 170, 182, 897, 489, 664, 399, 752
            , 780, 372, 792, 90, 467, 927, 221, 517, 63, 208, 463, 187, 383, 135, 283, 737, 32, 440, 428, 412, 138, 783
            , 236, 280, 355, 474, 615, 211, 455, 332, 113, 715, 123, 631, 698, 276, 224, 817, 665, 46, 507, 448, 870
            , 558, 926, 644, 284, 998, 557, 777, 494, 275, 540, 55, 653, 620, 16, 820, 603, 33, 773, 390, 245, 854, 535
            , 146, 238, 160, 109, 617, 769, 250, 482, 230, 679, 990, 542, 681, 232, 511, 460, 140, 765, 714, 657, 294
            , 750, 618, 89, 292, 35, 191, 647, 54, 80, 796, 621, 881, 134, 333, 611, 260, 940, 434, 114, 530, 327, 843
            , 909, 629, 314, 680, 293, 892, 790, 277, 110, 918, 661, 459, 794, 99, 634, 932, 594, 810, 315, 424, 249
            , 195, 827, 768, 384, 525, 83, 279, 912, 746, 552, 190, 126, 163, 442, 687, 503, 242, 3, 852, 622, 815, 865
            , 198, 341, 338, 447, 435, 264, 404, 903, 745, 845, 637, 826, 858, 597, 582, 855, 376, 577, 748, 691, 816
            , 654, 759, 986, 936, 813, 762, 437, 709, 92, 281, 673, 68, 744, 268, 742, 258, 313, 339, 798, 708, 732, 130
            , 956, 989, 143, 949, 747, 108, 200, 502, 209, 722, 786, 766, 837, 220, 723, 760, 616, 436, 733, 392, 22
            , 651, 416, 322, 669, 378, 601, 543, 702, 375, 121, 602, 580, 767, 878, 697, 694, 53, 832, 883, 566, 142
            , 844, 973, 397, 781, 102, 64, 849, 988, 414, 422, 97, 176, 662, 203, 545, 148, 524, 316, 421, 480, 863, 132
            , 630, 117, 410, 106, 495, 144, 902, 472, 596, 641, 824, 848, 578, 270, 272, 150, 548, 613, 420, 670, 560
            , 262, 202, 24, 805, 415, 30, 487, 1, 758, 626, 133, 885, 833, 395, 684, 830, 303, 21, 569, 206, 499, 541
            , 287, 87, 254, 555, 169, 478, 531, 904, 28, 491, 119, 977, 713, 950, 922, 124, 162, 201, 516, 710, 356, 204
            , 928, 139, 809, 485, 309, 764, 365, 546, 419, 643, 379, 94, 731, 302, 840, 330, 122, 364, 589, 456, 976, 45
            , 701, 461, 847, 961, 795, 44, 120, 358, 935, 266, 450, 366, 623, 772, 586, 612, 829, 470, 979, 520, 947
            , 640, 49, 914, 821, 100, 652, 599, 219, 506, 921, 957, 802, 394, 696, 991, 919, 960, 179, 690, 568, 396
            , 999, 981, 25, 585, 994, 320, 672, 405, 774, 797, 842, 851, 890, 213, 9, 825, 50, 403, 500, 271, 729, 222
            , 145, 2, 473, 51, 740, 411, 61, 347, 667, 181, 168, 823, 36, 141, 705, 699, 348, 635, 996, 59, 172, 757
            , 738, 159, 299, 861, 431, 484, 771, 576, 869, 67, 105, 598, 217, 593, 340, 493, 834, 579, 609, 255, 839
            , 925, 938, 716, 454, 866, 505, 803, 256, 974, 328, 627, 234, 893, 953, 85, 7, 724, 879, 371, 567, 252, 908
            , 523, 259, 610, 1
            ]

myConfig :: Config
myConfig = defaultConfig {
              timeLimit = 3
           }

-- execute: stack bench --benchmark-arguments "--output bench.html"
main :: IO ()
main = defaultMainWith myConfig [
    bgroup "1000-shuffled" [ bench "naive"    $ whnf minfreeNaive   largeList
                           , bench "array"    $ whnf minfreeArray   largeList
                           , bench "dnc"      $ whnf minfreeDnC     largeList
                           , bench "starray"  $ whnf minfreeSTArray largeList
                           ],
    bgroup "1000-sequenced" [ bench "naive"    $ whnf minfreeNaive   succList
                            , bench "array"    $ whnf minfreeArray   succList
                            , bench "dnc"      $ whnf minfreeDnC     succList
                            , bench "starray"  $ whnf minfreeSTArray succList
                            ]
  ]
